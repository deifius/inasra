"In computer programming, the scope of a name binding\u2014an association of a name to an entity, such as a variable\u2014is the part of a program where the name binding is valid, that is where the name can be used to refer to the entity. In other parts of the program the name may refer to a different entity (it may have a different binding), or to nothing at all (it may be unbound). The scope of a name binding is also known as the visibility of an entity, particularly in older or more technical literature\u2014this is from the perspective of the referenced entity, not the referencing name.\nThe term \"scope\" is also used to refer to the set of all name bindings that are valid within a part of a program or at a given point in a program, which is more correctly referred to as context or environment.Strictly speaking and in practice for most programming languages, \"part of a program\" refers to a portion of source code (area of text), and is known as lexical scope. In some languages, however, \"part of a program\" refers to a portion of run time (time period during execution), and is known as dynamic scope. Both of these terms are somewhat misleading\u2014they misuse technical terms, as discussed in the definition\u2014but the distinction itself is accurate and precise, and these are the standard respective terms. Lexical scope is the main focus of this article, with dynamic scope understood by contrast with lexical scope.\nIn most cases, name resolution based on lexical scope is relatively straightforward to use and to implement, as in use one can read backwards in the source code to determine to which entity a name refers, and in implementation one can maintain a list of names and contexts when compiling or interpreting a program. Difficulties arise in name masking, forward declarations, and hoisting, while considerably subtler ones arise with non-local variables, particularly in closures."