"An object file is a computer file containing object code, that is, machine code output of an assembler or compiler. The object code is usually relocatable, and not usually directly executable. There are various formats for object files, and the same machine code can be packaged in different object file formats. An object file may also work like a shared library.\nIn addition to the object code itself, object files may contain metadata used for linking or debugging, including: information to resolve symbolic cross-references between different modules, relocation information, stack unwinding information, comments, program symbols, debugging or profiling information.\n\nThe term \"object program\" dates from at least the 1950s: A term in automatic programming for the machine language program produced by the machine by translating a source program written by the programmer in a language similar to algebraic notation.\nA computer programmer generates object code with a compiler. For example, under Linux the GNU Compiler Collection compiler will generate files which have a .o extension and use the ELF format. On Windows, they have a .obj extension and use the COFF format. A linker is then used to combine the object code into one executable program or library pulling in precompiled system libraries as needed. In contrast, scripts (Python or JavaScript) are interpreted and Java (programming language) programs are compiled into byte-code class files.\n\n\n== Object file formats ==\nThere are many different object file formats; originally each type of computer had its own unique format, but with the advent of Unix and other portable operating systems, some formats, such as COFF and ELF, have been defined and used on different kinds of systems. It is possible for the same file format to be used both as linker input and output, and thus as the library and executable file format. Some formats can contain machine code for different processors, with the correct one chosen by the operating system when the program is loaded.Some systems make a distinction between files which are directly executable and files which require processing by the linker. For example, OS/360 and successors call the first format a load module and the second an object module. In this case the files have entirely different formats.\nThe design and/or choice of an object file format is a key part of overall system design.  It affects the performance of the linker and thus programmer turnaround while a program is being developed. If the format is used for executables, the design also affects the time programs take to begin running, and thus the responsiveness for users.\n\n\n=== Absolute object files ===\nMany early computers, or small microcomputers, support only an absolute object format. Programs are not relocatable; they need to be assembled or compiled to execute at specific, predefined addresses. The file contains no relocation or linkage information. These files can be loaded into read/write memory, or stored in read-only memory. For example, the Motorola 6800 MIKBUG monitor contains a routine to read an absolute object file (SREC Format) from paper tape. DOS COM files are a more recent example of absolute object files.\n\n\n=== Segmentation ===\nMost object file formats are structured as separate sections of data, each section containing a certain type of data. These sections are known as \"segments\" due to the term \"memory segment\", which was previously a common form of memory management. When a program is loaded into memory by a loader, the loader allocates various regions of memory to the program.  Some of these regions correspond to segments of the object file, and thus are usually known by the same names. Others, such as the stack,  only exist at run time. In some cases, relocation is done by the loader (or linker) to specify the actual memory addresses. However, for many programs or architectures, relocation is not necessary, due to being handled by the memory management unit or by position-independent code. On some systems the segments of the object file can then be copied (paged) into memory and executed, without needing further processing. On these systems, this may be done lazily, that is, only when the segments are referenced during execution, for example via a memory-mapped file backed by the object file.\nTypes of data supported by typical object file formats:\nHeader (descriptive and control information)\nCode segment (\"text segment\", executable code)\nData segment (initialized static variables)\nRead-only data segment (rodata, initialized static constants)\nBSS segment (uninitialized static data, both variables and constants)\nExternal definitions and references for linking\nRelocation information\nDynamic linking information\nDebugging informationSegments in different object files may be combined by the linker according to rules specified when the segments are defined. Conventions exist for segments shared between object files; for instance, in DOS there are different memory models that specify the names of special segments and whether or not they may be combined.Debugging information may either be an integral part of the object file format, as in COFF, or a semi-independent format which may be used with several object formats, such as stabs or DWARF.\nThe GNU Project's Binary File Descriptor library (BFD library) provides a common API for the manipulation of object files in a variety of formats.\n\n\n== References ==\n\n\n== Further reading ==\nLevine, John R. (2000). Linkers & Loaders. Morgan Kaufmann Publishers. p. 256. ISBN 1-55860-496-0."